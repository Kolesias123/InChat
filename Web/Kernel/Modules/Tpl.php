<?php####################################################### 					 BeatRock				   	   ######################################################### Framework avanzado de procesamiento para PHP.   ######################################################### InfoSmart © 2012 Todos los derechos reservados. #### http://www.infosmart.mx/						   ######################################################### http://beatrock.infosmart.mx/				   #######################################################// Acción ilegal.if(!defined("BEATROCK"))	exit;	class Tpl{	public static $html = "";	public static $lang = "";	private static $params = Array();		public static $metas = "";	public static $styles = "";	public static $js = "";	public static $vars = "";	public static $stuff = "";	public static $javascript = "";		// Función privada - Lanzar error.	// - $function: Función causante.	// - $msg: Mensaje del error.	private static function Error($code, $function, $msg = '')	{		BitRock::setStatus($msg, __FILE__, Array('function' => $function));		BitRock::launchError($code);	}		// Función - Cargar una plantilla.	// - $id: Identificación de variables a usar.	public static function Load()	{		// Revisando caché.		$cache = self::GetCache();				// Caché ha sido encontrada, usarla.		if($cache !== false)		{			self::$html = $cache;			return true;		}				// Extraer todas las variables.		extract($GLOBALS);				// Configuración recomendada.		$header = true;		$footer = true;		$folder = "";				// ¡Un navegador móvil! Usar la carpeta de plantillas para móvil.		if(Core::IsMobile() AND $site['site_mobile'] == "true")		{			// Ya habia carpetas definidas antes.			// Si no, solo definir.			if(is_array($page['folder']))			{				$pa = $page['folder'];				$page['folder'] = Array('mobile');								foreach($pa as $fo)					$page['folder'][] = $fo;			}			else				$page['folder'] = Array('mobile', $page['folder']);		}				// La plantilla se encuentra en 2 o más folders.		if(is_array($page['folder']))		{			$pa = $page['folder'];			$page['folder'] = "";						foreach($pa as $fo)				$page['folder'] .= "$fo" . DS;		}				// Establecer plantilla y folder.		$template = $page['id'];				$folder = $page['folder'];					// Estableciendo uso de la cabecera.		if(isset($page['header']))			$header = $page['header'];					// Estableciendo uso del pie de página.		if(isset($page['footer']))			$footer = $page['footer'];					// Si el folder no esta vacio.		if(!empty($folder))		{			if(substr($folder, -1) !== DS AND substr($folder, -1) !== "/")				$folder .= DS;		}					// Procesando la plantilla.		if(is_array($template))		{			$html = "";						foreach($template as $t)				$html .= self::Process(TEMPLATES . $folder . $t);		}		else			$html = self::Process(TEMPLATES . $folder . $template);					// Comprimiendo...		$html = self::Compress($html);		// Comenzar recolección de buffer.		ob_start();							// Usar cabecera.		if($header)		{			// Definiendo cabecera a usar.			$h = "Header";						if(Core::IsMobile() AND $site['site_mobile'] == "true")				$h .= ".Mobile";							// El archivo de cabecera no existe.			if(!file_exists(HEADERS . $h . '.php'))				self::Error("02t", __FUNCTION__, "No ha sido posible cargar la cabecera '" . HEADERS . " $h.php'.");						// Implementando funciones de cabecera.			require(KERNEL . 'Functions.Header.php');						// Nombre del sitio absoluto definido.			// Si no, usar nombre de página.			if(!empty($page['site_name']))				$site['name'] = $page['site_name'];			else			{				if(empty($page['name']))					$page['name'] = $site['site_slogan'];									$site['name'] = SITE_NAME;				$site['name'] .= !empty($page['name']) ? " $site[site_separation] " : "";				$site['name'] .= $page['name'];			}						// Si la subcabecera esta vacia, usar la predeterminada.			if(empty($page['subheader']))				$page['subheader'] = "SubHeader";							// El archivo de subcabecera no existe y no definimos no usar ninguna.			if(!file_exists(HEADERS . $page['subheader'] . '.php') AND $page['subheader'] !== "none")				self::Error("02t", __FUNCTION__, "No ha sido posible cargar la subcabecera '" . HEADERS . " $page[subheader].php'.");						// Implementando la cabecera.			require(HEADERS . $h . '.php');						// Implementando la subcabecera.			if($page['subheader'] !== "none")				require(HEADERS . $page['subheader'] . '.php');		}				// Imprimiendo HTML de la plantilla.		echo $html;				// Usar pie de página.		if($footer)		{			// Si el sub pie de página esta vacio, usar el predeterminada.			if(empty($page['subfooter']))				$page['subfooter'] = "SubFooter";							// El pie de página no existe.			if(!file_exists(HEADERS . $page['subfooter'] . '.php') AND $page['subfooter'] !== "none")				self::Error("02t", __FUNCTION__, "No ha sido posible cargar el sub pie de página '" . HEADERS . " $page[subfooter].php'.");							// Implementando sub pie de página.			if($page['subfooter'] !== "none")				require(HEADERS . $page['subfooter'] . '.php');						// Implementando pie de página.			require(HEADERS . 'Footer.php');		}						// Definiendo HTML procesado.		$html = ob_get_contents();				// Aplicando traducciones.		$lang = self::SetLang($html, $page['lang']);		$html = $lang[0];				// Aplicando variables.		$html = self::SetParams($html, $page['parid']);				// Definiendo HTML final.		self::$html = $html;		self::$lang = $lang[1];				// Limpiar buffer actual.		ob_clean();	}		// Función - Procesar una plantilla (TPL) y obtener su contenido en HTML.	// - $tpl: Ubicación de la plantilla.	// - $extra (Bool): ¿Aplicar las variables y comprimir HTML?	public static function Process($tpl, $extra = false)	{				// Comenzar recolección de buffer.		ob_start();				// Extraer todas las variables.		extract($GLOBALS);				// La plantilla no existe.		if(!file_exists("$tpl.tpl"))			self::Error("01t", __FUNCTION__, "No ha sido posible cargar la plantilla especificada '$tpl'.");				// Requiriendo la plantilla.		require("$tpl.tpl");				// Estableciendo HTML de plantilla como el buffer actual.		$html = ob_get_contents();				if($extra)		{			// Aplicando traducciones.			$lang = self::SetLang($html, $page['lang']);			$html = $lang[0];						// Aplicando variables.			$html = self::SetParams($html);						// Comprimiendo...			$html = self::Compress($html);		}				// Limpiar buffer actual.		ob_clean();		return $html;			}		// Función - Aplicar variables al código HTML.	// - $html: Código HTML.	// - $id: Identificación de variables.	public static function SetParams($html, $id = "%")	{		// La identificación de variables esta vacia.		if(empty($id))			$id = "%";					// Remplazando variables.		if(!empty(self::$params))		{			foreach(self::$params as $p => $v)				$html = str_ireplace($id . $p . $id, $v, $html);		}				return $html;	}		// Función - Aplicar variables de traducción al código HTML.	// - $html: Código HTML.	// - $lang: Código de lenguaje.	public static function SetLang($html, $lang = "")	{		global $site, $page;				// Utilizar lenguaje del usuario.		if(empty($lang))			$lang = LANG;					// Al parecer obligaremos a usar un lenguaje.		if(!empty($site['site_translate']))			$lang = $site['site_translate'];				// Obtener las traducciones disponibles.		$r = Site::getTranslations($lang);				// La traducción esta desabilitada.		if($site['site_translate'] == "false")			return Array($html, $lang);					// No se encontraron traducciones disponibles.		if($r == false)			return Array(preg_replace('/\||(.*?)\||/is', '${1}', $html), $lang);					// Remplazando por traducciones.		while($row = mysql_fetch_assoc($r))		{						if(!empty($row['var']))				$html = str_ireplace("||$row[var]||", $row['translated'], $html);							if(!empty($row['original']))				$html = str_ireplace("||$row[original]||", $row['translated'], $html);						if($site['site_smart_translate'] == "true" OR $page['smart_translate'] == true)				$html = str_replace($row['original'], $row['translated'], $html);		}				$html = preg_replace('/\||(.*?)\||/is', '${1}', $html);		return Array($html, $lang);	}		// Función - Comprimir código HTML.	// - $html: Código HTML.	public static function Compress($html)	{		global $config, $page;				// Comprimiendo HTML.		if(BROWSER !== "Internet Explorer" AND BROWSER !== "Internet Explorer 9" AND $page['compress'] !== false)		{			if($config['server']['compression'] OR $page['compress'] == true)				$html = Core::Compress($html);		}				return $html;	}		// Función - Guardar caché de la página actual.	public static function SaveCache()	{		global $page;				// Definiendo si hay cache.		$cache = Site::getCache($page['id']);		$file = BIT . 'Cache' . DS . $page['id'] . '.' . self::$lang . '.cache';				// No hay caché encontrado.		if(!$cache)			return false;				// La caché actual aún no expira.		if(time() > (filemtime($file) + ($cache['time'] * 60 * 60)) AND file_exists($file))			return false;				// Retornar resultado del guardado de caché.		return Io::Write($file, Tpl::$html);	}		// Función - Obtener caché de la página actual.	public static function GetCache()	{		global $page;				// Definiendo si hay cache.		$cache = Site::getCache($page['id']);		$file = BIT . 'Cache' . DS . $page['id'] . '.' . self::$lang . '.cache';				// No hay caché encontrado.		if(!file_exists($file) OR !$cache)			return false;						// Retornando caché.		return Io::Read($file);	}		// Función - Establecer variable.	// - $param (String, Array): Variable.	// - $vlaue: Valor.	public static function Set($param, $value = '')	{		// Es un array, estableciendo varias variables.		// Si no, establecer una sola.		if(is_array($param))		{			foreach($param as $pa => $va)				self::$params[$pa] = $va;		}		else if(is_string($param))			self::$params[$param] = $value;	}		// Función - Eliminar variable.	// - $param: Variable.	public static function Del($param)	{		unset(self::$params[$param]);	}		// Función - Agregar jQuery a la página.	// - $resources: ¿Agregarlo desde los recursos locales?	public static function addjQuery($resources = true)	{		//global $site;				// Agregando archivos de recursos locales.		// Si no, agregar de recursos externos oficiales.		if($resources)		{			$file = RESOURCES_SYS . '/js/jquery.js';			//$mob = RESOURCES_SYS . '/js/jquery.mobile.js';			//$css = RESOURCES_SYS . '/css/external/jquery.mobile.css';		}		else		{			$file = '//code.jquery.com/jquery-latest.min.js';			//$mob = '//code.jquery.com/mobile/latest/jquery.mobile.min.js';			//$css = '//code.jquery.com/mobile/latest/jquery.mobile.min.css';		}				// Agregar archivo JavaScript.		self::addScript($file);				// Si es un móvil, agregar jQuery Mobile.		/*		if(Core::isMobile() AND $site['site_mobile'] == "true")		{			self::addScript($mob);			self::addStyle($css);		}		*/	}		// Función - Agregar un elemento Meta.	// - $name: Nombre de la META.	// - $content: Contenido/Valor.	// - $type: Tipo.	public static function addMeta($name, $content, $type = 'name')	{		self::$metas .= "<meta $type=\"$name\" content=\"$content\">\r\n";	}		// Función - Agregar un archivo de estilo.	// - $file: Ruta del archivo CSS.	// - $rel: Rel.	// - $id: ID del elemento.	// - $media: Media.	public static function addStyle($file, $rel = 'stylesheet', $id = '', $media = '')	{					$style = "<link href=\"$file\" ";				if(!empty($rel))			$style .= "rel=\"$rel\" ";					if(!empty($id))			$style .= "id=\"$id\" ";					if(!empty($media))			$style .= "media=\"$media\" ";				$style .= "/>";		self::$styles .= $style;				return true;	}		// Función - Agregar un archivo de estilo con la ubicación predeterminada.	// - $file: Archivo CSS.	// - $system (Bool): ¿De los recursos globales?	// - $external (Bool) - ¿De los recursos externos?	public static function myStyle($file, $system = false, $external = false)	{		if(!$system)			$path = RESOURCES . "/css";		else			$path = RESOURCES_SYS . "/css";					if($external)			$path = "$path/external";					self::addStyle("$path/$file.css");	}		// Función - Agregar un archivo JavaScript.	// - $file: Ruta del archivo.	// - $async (Bool): ¿Sincronizado?	// - $id: ID del elemento.	public static function addScript($file, $async = false, $id = '')	{					$javascript = "<script src=\"$file\"";				if(!empty($id))			$javascript .= " id=\"$id\"";				if($async)			$javascript .= " async=\"true\"";					$javascript .= "></script>";		self::$js .= $javascript;	}		// Función - Agregar un archivo Javascript con la ubicación predeterminada.	// - $file: Archivo JavaScript.	// - $system (Bool): ¿De los recursos globales?	// - $external (Bool) - ¿De los recursos externos?	public static function myScript($file, $system = false, $external = false)	{		if(!$system)			$path = RESOURCES . "/js";		else			$path = RESOURCES_SYS . "/js";					if($external)			$path = "$path/external";					self::addScript("$path/$file.js");	}		// Función - Agregar variable/función/definición JavaScript.	// - $param: Variable/Función/Definición.	// - $value: Valor.	// - $var: ¿Variable?	public static function addVar($param, $value, $var = true)	{		$html = "";				if($value !== "true" AND $value !== "false" AND $value !== "null" AND !is_numeric($value))			$value = '"' . $value . '"';				if($var)			$html .= "var ";					$html .= "$param = $value;\r\n";		self::$vars .= $html;	}		// Función - Agregar "Cosas".	// - $html: HTML de tu "Cosa".	public static function addStuff($html)	{		self::$stuff .= "$html\r\n";	}		// Función - Agregar una tarea para la barra de tareas especial para Internet Explorer 9+	// - $name: Nombre de la tarea.	// - $url: Dirección web de la tarea.	// - $icon: Dirección web del icono.	public static function IETask($name, $url, $icon = "")	{		self::addMeta("msapplication-task", "name=$name;action-uri=$url;icon-uri=$icon");	}		// Función - Ejecutar una acción JavaScript al terminar de cargar la página.	// - action: Acción JavaScript.	public static function JavaAction($action)	{		// El HTML de JavaScript esta vacio.		if(empty(self::$javascript))			self::$javascript = "<script>$(document).on(\"ready\", function() { ";					self::$javascript .= " $action ";	}		// Función - Ejecutar una alerta JavaScript.	// - $msg: Mensaje.	public static function JavaAlert($msg)	{		self::JavaAction("alert('$msg'); ");	}}?>